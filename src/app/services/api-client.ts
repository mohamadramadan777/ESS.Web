//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { API_BASE_URL } from './tokens';


@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    authenticate(body: AuthenticateRequest | undefined): Observable<AuthenticateResponseBaseResponse> {
        let url_ = this.baseUrl + "/api/AccessRequest/authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticateResponseBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticateResponseBaseResponse>;
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateResponseBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResponseBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResponseBaseResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    sendFeedback(body: ContactUs | undefined): Observable<Int32BaseResponse> {
        let url_ = this.baseUrl + "/api/AccessRequest/sendFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Int32BaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Int32BaseResponse>;
        }));
    }

    protected processSendFeedback(response: HttpResponseBase): Observable<Int32BaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int32BaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Int32BaseResponse>(null as any);
    }

    /**
     * @return OK
     */
    protected(): Observable<void> {
        let url_ = this.baseUrl + "/api/AccessRequest/protected";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProtected(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProtected(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processProtected(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @return OK
     */
    getObjectTaskStatus(): Observable<ObjTasksListBaseResponse> {
        let url_ = this.baseUrl + "/api/Firms/GetObjectTaskStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetObjectTaskStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetObjectTaskStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ObjTasksListBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ObjTasksListBaseResponse>;
        }));
    }

    protected processGetObjectTaskStatus(response: HttpResponseBase): Observable<ObjTasksListBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjTasksListBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ObjTasksListBaseResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    insertUpdateObjTaskStatus(body: ObjTasks | undefined): Observable<BooleanBaseResponse> {
        let url_ = this.baseUrl + "/api/Firms/InsertUpdateObjTaskStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertUpdateObjTaskStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertUpdateObjTaskStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanBaseResponse>;
        }));
    }

    protected processInsertUpdateObjTaskStatus(response: HttpResponseBase): Observable<BooleanBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BooleanBaseResponse>(null as any);
    }

    /**
     * @param tableName (optional) 
     * @return OK
     */
    getMastertableData(tableName: string | undefined): Observable<StringStringDictionaryBaseResponse> {
        let url_ = this.baseUrl + "/api/MasterData/get-mastertable-data?";
        if (tableName === null)
            throw new Error("The parameter 'tableName' cannot be null.");
        else if (tableName !== undefined)
            url_ += "tableName=" + encodeURIComponent("" + tableName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMastertableData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMastertableData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringStringDictionaryBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringStringDictionaryBaseResponse>;
        }));
    }

    protected processGetMastertableData(response: HttpResponseBase): Observable<StringStringDictionaryBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringStringDictionaryBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StringStringDictionaryBaseResponse>(null as any);
    }
}

export class AppRoles implements IAppRoles {
    roleId?: number;
    roleDescription?: string | undefined;
    roleValid?: boolean;

    constructor(data?: IAppRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.roleDescription = _data["roleDescription"];
            this.roleValid = _data["roleValid"];
        }
    }

    static fromJS(data: any): AppRoles {
        data = typeof data === 'object' ? data : {};
        let result = new AppRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleDescription"] = this.roleDescription;
        data["roleValid"] = this.roleValid;
        return data;
    }
}

export interface IAppRoles {
    roleId?: number;
    roleDescription?: string | undefined;
    roleValid?: boolean;
}

export class ApplicationDetail implements IApplicationDetail {
    firmID?: number;
    fullName?: string | undefined;
    id?: number;
    userId?: number;
    value?: string | undefined;
    qfcNmuner?: string | undefined;
    applContactDetailID?: number;
    applicationStatusTypeID?: number;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    addressLine4?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    countryID?: string | undefined;
    countryName?: string | undefined;
    postalCode?: string | undefined;
    firmName?: string | undefined;
    functionID?: number;
    positionOfMainContact?: string | undefined;
    contactID?: number;
    nameOfMainContact?: string | undefined;
    telephoneNumber?: string | undefined;
    faxNumber?: string | undefined;
    emailAddressOfMainAccount?: string | undefined;
    preferredMethodOfContact?: string | undefined;
    primaryCaseOfficerAuthName?: string | undefined;
    primaryCaseOfficerAuthEmail?: string | undefined;
    secondryCaseOfficerAuthName?: string | undefined;
    secondryCaseOfficerAuthEmail?: string | undefined;
    primaryCaseOfficerSupName?: string | undefined;
    primaryCaseOfficerSupEmail?: string | undefined;
    secondryCaseOfficerSupName?: string | undefined;
    secondryCaseOfficerSupEmail?: string | undefined;
    additionalCaseOfficerSupEmail?: string | undefined;
    directorEmail?: string | undefined;
    qfcNumber?: string | undefined;
    aiNumber?: string | undefined;
    applicationID?: number;
    formTypeID?: number;
    applStatusTypeID?: number;
    arrangementTypeID?: number | undefined;
    arrangementTypeDesc?: string | undefined;
    arrangementTypeOtherDesc?: string | undefined;
    competenciesAndExp?: string | undefined;
    cfExcercisedDesc?: string | undefined;
    currentJobTitle?: string | undefined;
    jobTitleChangeFlag?: boolean | undefined;
    proposedJobTitle?: string | undefined;
    jobDesc?: string | undefined;
    pastPositionFlag?: boolean | undefined;
    pastPositionDesc?: string | undefined;
    fandPAddnlInfo?: string | undefined;
    fandPChangeDesc?: string | undefined;
    withdrawlReasonDesc?: string | undefined;
    altArrangementFlag?: boolean | undefined;
    altArrangementDesc?: string | undefined;
    wcfAddnlInfo?: string | undefined;
    cfApplicationDetail?: string | undefined;
    residencyNAFlag?: boolean | undefined;
    aliasesNAFlag?: boolean | undefined;
    careerHistoryNAFlag?: boolean | undefined;
    careerHistoryNAReason?: string | undefined;
    prevEmploymentFlag?: boolean | undefined;
    appUserID?: number;
    appCreatedBy?: number;
    modifiedDate?: string | undefined;
    userModified?: number;
    createdDate?: string | undefined;
    formTypeDesc?: string | undefined;
    applStatusTypeDesc?: string | undefined;
    reglsNAFlag?: boolean | undefined;
    nationalIdNAFlag?: boolean | undefined;
    qatarRelocationNAFlag?: boolean | undefined;
    profDevFalg?: boolean | undefined;
    profMembFlag?: boolean | undefined;
    higherEduFlag?: boolean | undefined;
    appStatusDate?: Date;
    appRecieveDate?: Date;
    coreApplicationID?: number;
    lstControledFunction?: ControledFunction[] | undefined;
    anyFileToAttachFlag?: boolean | undefined;
    additionalFileFlag?: boolean | undefined;
    applicationDate?: string | undefined;
    wObjectSOStatusID?: number | undefined;
    prevApplicationId?: number | undefined;
    additionalSupervisorFlag?: boolean | undefined;
    positionHeldFlag?: boolean | undefined;
    supervisingFlag?: boolean | undefined;
    resubmissionComments?: string | undefined;
    applicantName?: string | undefined;
    pageFlag?: string | undefined;
    reasonForDelayInFiling?: string | undefined;
    isOrdinarilyResidentFlag?: boolean | undefined;
    proposedRelocationDateDay?: number;
    proposedRelocationDateMonth?: number;
    proposedRelocationDateYear?: number;
    updateWobjectStatus?: boolean;

    constructor(data?: IApplicationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firmID = _data["firmID"];
            this.fullName = _data["fullName"];
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.value = _data["value"];
            this.qfcNmuner = _data["qfcNmuner"];
            this.applContactDetailID = _data["applContactDetailID"];
            this.applicationStatusTypeID = _data["applicationStatusTypeID"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.addressLine3 = _data["addressLine3"];
            this.addressLine4 = _data["addressLine4"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.countryID = _data["countryID"];
            this.countryName = _data["countryName"];
            this.postalCode = _data["postalCode"];
            this.firmName = _data["firmName"];
            this.functionID = _data["functionID"];
            this.positionOfMainContact = _data["positionOfMainContact"];
            this.contactID = _data["contactID"];
            this.nameOfMainContact = _data["nameOfMainContact"];
            this.telephoneNumber = _data["telephoneNumber"];
            this.faxNumber = _data["faxNumber"];
            this.emailAddressOfMainAccount = _data["emailAddressOfMainAccount"];
            this.preferredMethodOfContact = _data["preferredMethodOfContact"];
            this.primaryCaseOfficerAuthName = _data["primaryCaseOfficerAuthName"];
            this.primaryCaseOfficerAuthEmail = _data["primaryCaseOfficerAuthEmail"];
            this.secondryCaseOfficerAuthName = _data["secondryCaseOfficerAuthName"];
            this.secondryCaseOfficerAuthEmail = _data["secondryCaseOfficerAuthEmail"];
            this.primaryCaseOfficerSupName = _data["primaryCaseOfficerSupName"];
            this.primaryCaseOfficerSupEmail = _data["primaryCaseOfficerSupEmail"];
            this.secondryCaseOfficerSupName = _data["secondryCaseOfficerSupName"];
            this.secondryCaseOfficerSupEmail = _data["secondryCaseOfficerSupEmail"];
            this.additionalCaseOfficerSupEmail = _data["additionalCaseOfficerSupEmail"];
            this.directorEmail = _data["directorEmail"];
            this.qfcNumber = _data["qfcNumber"];
            this.aiNumber = _data["aiNumber"];
            this.applicationID = _data["applicationID"];
            this.formTypeID = _data["formTypeID"];
            this.applStatusTypeID = _data["applStatusTypeID"];
            this.arrangementTypeID = _data["arrangementTypeID"];
            this.arrangementTypeDesc = _data["arrangementTypeDesc"];
            this.arrangementTypeOtherDesc = _data["arrangementTypeOtherDesc"];
            this.competenciesAndExp = _data["competenciesAndExp"];
            this.cfExcercisedDesc = _data["cfExcercisedDesc"];
            this.currentJobTitle = _data["currentJobTitle"];
            this.jobTitleChangeFlag = _data["jobTitleChangeFlag"];
            this.proposedJobTitle = _data["proposedJobTitle"];
            this.jobDesc = _data["jobDesc"];
            this.pastPositionFlag = _data["pastPositionFlag"];
            this.pastPositionDesc = _data["pastPositionDesc"];
            this.fandPAddnlInfo = _data["fandPAddnlInfo"];
            this.fandPChangeDesc = _data["fandPChangeDesc"];
            this.withdrawlReasonDesc = _data["withdrawlReasonDesc"];
            this.altArrangementFlag = _data["altArrangementFlag"];
            this.altArrangementDesc = _data["altArrangementDesc"];
            this.wcfAddnlInfo = _data["wcfAddnlInfo"];
            this.cfApplicationDetail = _data["cfApplicationDetail"];
            this.residencyNAFlag = _data["residencyNAFlag"];
            this.aliasesNAFlag = _data["aliasesNAFlag"];
            this.careerHistoryNAFlag = _data["careerHistoryNAFlag"];
            this.careerHistoryNAReason = _data["careerHistoryNAReason"];
            this.prevEmploymentFlag = _data["prevEmploymentFlag"];
            this.appUserID = _data["appUserID"];
            this.appCreatedBy = _data["appCreatedBy"];
            this.modifiedDate = _data["modifiedDate"];
            this.userModified = _data["userModified"];
            this.createdDate = _data["createdDate"];
            this.formTypeDesc = _data["formTypeDesc"];
            this.applStatusTypeDesc = _data["applStatusTypeDesc"];
            this.reglsNAFlag = _data["reglsNAFlag"];
            this.nationalIdNAFlag = _data["nationalIdNAFlag"];
            this.qatarRelocationNAFlag = _data["qatarRelocationNAFlag"];
            this.profDevFalg = _data["profDevFalg"];
            this.profMembFlag = _data["profMembFlag"];
            this.higherEduFlag = _data["higherEduFlag"];
            this.appStatusDate = _data["appStatusDate"] ? new Date(_data["appStatusDate"].toString()) : <any>undefined;
            this.appRecieveDate = _data["appRecieveDate"] ? new Date(_data["appRecieveDate"].toString()) : <any>undefined;
            this.coreApplicationID = _data["coreApplicationID"];
            if (Array.isArray(_data["lstControledFunction"])) {
                this.lstControledFunction = [] as any;
                for (let item of _data["lstControledFunction"])
                    this.lstControledFunction!.push(ControledFunction.fromJS(item));
            }
            this.anyFileToAttachFlag = _data["anyFileToAttachFlag"];
            this.additionalFileFlag = _data["additionalFileFlag"];
            this.applicationDate = _data["applicationDate"];
            this.wObjectSOStatusID = _data["wObjectSOStatusID"];
            this.prevApplicationId = _data["prevApplicationId"];
            this.additionalSupervisorFlag = _data["additionalSupervisorFlag"];
            this.positionHeldFlag = _data["positionHeldFlag"];
            this.supervisingFlag = _data["supervisingFlag"];
            this.resubmissionComments = _data["resubmissionComments"];
            this.applicantName = _data["applicantName"];
            this.pageFlag = _data["pageFlag"];
            this.reasonForDelayInFiling = _data["reasonForDelayInFiling"];
            this.isOrdinarilyResidentFlag = _data["isOrdinarilyResidentFlag"];
            this.proposedRelocationDateDay = _data["proposedRelocationDateDay"];
            this.proposedRelocationDateMonth = _data["proposedRelocationDateMonth"];
            this.proposedRelocationDateYear = _data["proposedRelocationDateYear"];
            this.updateWobjectStatus = _data["updateWobjectStatus"];
        }
    }

    static fromJS(data: any): ApplicationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firmID"] = this.firmID;
        data["fullName"] = this.fullName;
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["value"] = this.value;
        data["qfcNmuner"] = this.qfcNmuner;
        data["applContactDetailID"] = this.applContactDetailID;
        data["applicationStatusTypeID"] = this.applicationStatusTypeID;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["addressLine3"] = this.addressLine3;
        data["addressLine4"] = this.addressLine4;
        data["city"] = this.city;
        data["state"] = this.state;
        data["countryID"] = this.countryID;
        data["countryName"] = this.countryName;
        data["postalCode"] = this.postalCode;
        data["firmName"] = this.firmName;
        data["functionID"] = this.functionID;
        data["positionOfMainContact"] = this.positionOfMainContact;
        data["contactID"] = this.contactID;
        data["nameOfMainContact"] = this.nameOfMainContact;
        data["telephoneNumber"] = this.telephoneNumber;
        data["faxNumber"] = this.faxNumber;
        data["emailAddressOfMainAccount"] = this.emailAddressOfMainAccount;
        data["preferredMethodOfContact"] = this.preferredMethodOfContact;
        data["primaryCaseOfficerAuthName"] = this.primaryCaseOfficerAuthName;
        data["primaryCaseOfficerAuthEmail"] = this.primaryCaseOfficerAuthEmail;
        data["secondryCaseOfficerAuthName"] = this.secondryCaseOfficerAuthName;
        data["secondryCaseOfficerAuthEmail"] = this.secondryCaseOfficerAuthEmail;
        data["primaryCaseOfficerSupName"] = this.primaryCaseOfficerSupName;
        data["primaryCaseOfficerSupEmail"] = this.primaryCaseOfficerSupEmail;
        data["secondryCaseOfficerSupName"] = this.secondryCaseOfficerSupName;
        data["secondryCaseOfficerSupEmail"] = this.secondryCaseOfficerSupEmail;
        data["additionalCaseOfficerSupEmail"] = this.additionalCaseOfficerSupEmail;
        data["directorEmail"] = this.directorEmail;
        data["qfcNumber"] = this.qfcNumber;
        data["aiNumber"] = this.aiNumber;
        data["applicationID"] = this.applicationID;
        data["formTypeID"] = this.formTypeID;
        data["applStatusTypeID"] = this.applStatusTypeID;
        data["arrangementTypeID"] = this.arrangementTypeID;
        data["arrangementTypeDesc"] = this.arrangementTypeDesc;
        data["arrangementTypeOtherDesc"] = this.arrangementTypeOtherDesc;
        data["competenciesAndExp"] = this.competenciesAndExp;
        data["cfExcercisedDesc"] = this.cfExcercisedDesc;
        data["currentJobTitle"] = this.currentJobTitle;
        data["jobTitleChangeFlag"] = this.jobTitleChangeFlag;
        data["proposedJobTitle"] = this.proposedJobTitle;
        data["jobDesc"] = this.jobDesc;
        data["pastPositionFlag"] = this.pastPositionFlag;
        data["pastPositionDesc"] = this.pastPositionDesc;
        data["fandPAddnlInfo"] = this.fandPAddnlInfo;
        data["fandPChangeDesc"] = this.fandPChangeDesc;
        data["withdrawlReasonDesc"] = this.withdrawlReasonDesc;
        data["altArrangementFlag"] = this.altArrangementFlag;
        data["altArrangementDesc"] = this.altArrangementDesc;
        data["wcfAddnlInfo"] = this.wcfAddnlInfo;
        data["cfApplicationDetail"] = this.cfApplicationDetail;
        data["residencyNAFlag"] = this.residencyNAFlag;
        data["aliasesNAFlag"] = this.aliasesNAFlag;
        data["careerHistoryNAFlag"] = this.careerHistoryNAFlag;
        data["careerHistoryNAReason"] = this.careerHistoryNAReason;
        data["prevEmploymentFlag"] = this.prevEmploymentFlag;
        data["appUserID"] = this.appUserID;
        data["appCreatedBy"] = this.appCreatedBy;
        data["modifiedDate"] = this.modifiedDate;
        data["userModified"] = this.userModified;
        data["createdDate"] = this.createdDate;
        data["formTypeDesc"] = this.formTypeDesc;
        data["applStatusTypeDesc"] = this.applStatusTypeDesc;
        data["reglsNAFlag"] = this.reglsNAFlag;
        data["nationalIdNAFlag"] = this.nationalIdNAFlag;
        data["qatarRelocationNAFlag"] = this.qatarRelocationNAFlag;
        data["profDevFalg"] = this.profDevFalg;
        data["profMembFlag"] = this.profMembFlag;
        data["higherEduFlag"] = this.higherEduFlag;
        data["appStatusDate"] = this.appStatusDate ? this.appStatusDate.toISOString() : <any>undefined;
        data["appRecieveDate"] = this.appRecieveDate ? this.appRecieveDate.toISOString() : <any>undefined;
        data["coreApplicationID"] = this.coreApplicationID;
        if (Array.isArray(this.lstControledFunction)) {
            data["lstControledFunction"] = [];
            for (let item of this.lstControledFunction)
                data["lstControledFunction"].push(item.toJSON());
        }
        data["anyFileToAttachFlag"] = this.anyFileToAttachFlag;
        data["additionalFileFlag"] = this.additionalFileFlag;
        data["applicationDate"] = this.applicationDate;
        data["wObjectSOStatusID"] = this.wObjectSOStatusID;
        data["prevApplicationId"] = this.prevApplicationId;
        data["additionalSupervisorFlag"] = this.additionalSupervisorFlag;
        data["positionHeldFlag"] = this.positionHeldFlag;
        data["supervisingFlag"] = this.supervisingFlag;
        data["resubmissionComments"] = this.resubmissionComments;
        data["applicantName"] = this.applicantName;
        data["pageFlag"] = this.pageFlag;
        data["reasonForDelayInFiling"] = this.reasonForDelayInFiling;
        data["isOrdinarilyResidentFlag"] = this.isOrdinarilyResidentFlag;
        data["proposedRelocationDateDay"] = this.proposedRelocationDateDay;
        data["proposedRelocationDateMonth"] = this.proposedRelocationDateMonth;
        data["proposedRelocationDateYear"] = this.proposedRelocationDateYear;
        data["updateWobjectStatus"] = this.updateWobjectStatus;
        return data;
    }
}

export interface IApplicationDetail {
    firmID?: number;
    fullName?: string | undefined;
    id?: number;
    userId?: number;
    value?: string | undefined;
    qfcNmuner?: string | undefined;
    applContactDetailID?: number;
    applicationStatusTypeID?: number;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    addressLine4?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    countryID?: string | undefined;
    countryName?: string | undefined;
    postalCode?: string | undefined;
    firmName?: string | undefined;
    functionID?: number;
    positionOfMainContact?: string | undefined;
    contactID?: number;
    nameOfMainContact?: string | undefined;
    telephoneNumber?: string | undefined;
    faxNumber?: string | undefined;
    emailAddressOfMainAccount?: string | undefined;
    preferredMethodOfContact?: string | undefined;
    primaryCaseOfficerAuthName?: string | undefined;
    primaryCaseOfficerAuthEmail?: string | undefined;
    secondryCaseOfficerAuthName?: string | undefined;
    secondryCaseOfficerAuthEmail?: string | undefined;
    primaryCaseOfficerSupName?: string | undefined;
    primaryCaseOfficerSupEmail?: string | undefined;
    secondryCaseOfficerSupName?: string | undefined;
    secondryCaseOfficerSupEmail?: string | undefined;
    additionalCaseOfficerSupEmail?: string | undefined;
    directorEmail?: string | undefined;
    qfcNumber?: string | undefined;
    aiNumber?: string | undefined;
    applicationID?: number;
    formTypeID?: number;
    applStatusTypeID?: number;
    arrangementTypeID?: number | undefined;
    arrangementTypeDesc?: string | undefined;
    arrangementTypeOtherDesc?: string | undefined;
    competenciesAndExp?: string | undefined;
    cfExcercisedDesc?: string | undefined;
    currentJobTitle?: string | undefined;
    jobTitleChangeFlag?: boolean | undefined;
    proposedJobTitle?: string | undefined;
    jobDesc?: string | undefined;
    pastPositionFlag?: boolean | undefined;
    pastPositionDesc?: string | undefined;
    fandPAddnlInfo?: string | undefined;
    fandPChangeDesc?: string | undefined;
    withdrawlReasonDesc?: string | undefined;
    altArrangementFlag?: boolean | undefined;
    altArrangementDesc?: string | undefined;
    wcfAddnlInfo?: string | undefined;
    cfApplicationDetail?: string | undefined;
    residencyNAFlag?: boolean | undefined;
    aliasesNAFlag?: boolean | undefined;
    careerHistoryNAFlag?: boolean | undefined;
    careerHistoryNAReason?: string | undefined;
    prevEmploymentFlag?: boolean | undefined;
    appUserID?: number;
    appCreatedBy?: number;
    modifiedDate?: string | undefined;
    userModified?: number;
    createdDate?: string | undefined;
    formTypeDesc?: string | undefined;
    applStatusTypeDesc?: string | undefined;
    reglsNAFlag?: boolean | undefined;
    nationalIdNAFlag?: boolean | undefined;
    qatarRelocationNAFlag?: boolean | undefined;
    profDevFalg?: boolean | undefined;
    profMembFlag?: boolean | undefined;
    higherEduFlag?: boolean | undefined;
    appStatusDate?: Date;
    appRecieveDate?: Date;
    coreApplicationID?: number;
    lstControledFunction?: ControledFunction[] | undefined;
    anyFileToAttachFlag?: boolean | undefined;
    additionalFileFlag?: boolean | undefined;
    applicationDate?: string | undefined;
    wObjectSOStatusID?: number | undefined;
    prevApplicationId?: number | undefined;
    additionalSupervisorFlag?: boolean | undefined;
    positionHeldFlag?: boolean | undefined;
    supervisingFlag?: boolean | undefined;
    resubmissionComments?: string | undefined;
    applicantName?: string | undefined;
    pageFlag?: string | undefined;
    reasonForDelayInFiling?: string | undefined;
    isOrdinarilyResidentFlag?: boolean | undefined;
    proposedRelocationDateDay?: number;
    proposedRelocationDateMonth?: number;
    proposedRelocationDateYear?: number;
    updateWobjectStatus?: boolean;
}

export class AuthenticateRequest implements IAuthenticateRequest {
    userLoginName?: string | undefined;
    userPassword?: string | undefined;
    userIPAddress?: string | undefined;
    userSessionID?: string | undefined;
    termID?: number;
    qfcNumber?: string | undefined;

    constructor(data?: IAuthenticateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userLoginName = _data["userLoginName"];
            this.userPassword = _data["userPassword"];
            this.userIPAddress = _data["userIPAddress"];
            this.userSessionID = _data["userSessionID"];
            this.termID = _data["termID"];
            this.qfcNumber = _data["qfcNumber"];
        }
    }

    static fromJS(data: any): AuthenticateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userLoginName"] = this.userLoginName;
        data["userPassword"] = this.userPassword;
        data["userIPAddress"] = this.userIPAddress;
        data["userSessionID"] = this.userSessionID;
        data["termID"] = this.termID;
        data["qfcNumber"] = this.qfcNumber;
        return data;
    }
}

export interface IAuthenticateRequest {
    userLoginName?: string | undefined;
    userPassword?: string | undefined;
    userIPAddress?: string | undefined;
    userSessionID?: string | undefined;
    termID?: number;
    qfcNumber?: string | undefined;
}

export class AuthenticateResponse implements IAuthenticateResponse {
    userInfo?: WAccessRequests;
    token?: string | undefined;
    userRoles?: AppRoles[] | undefined;
    userRolesString?: string | undefined;
    refreshToken?: string | undefined;
    bIsRegistered?: boolean;
    bIsAuthenticated?: boolean;
    bIsPasswordReset?: boolean;
    wAccessReuestID?: number;
    resetPasswordFlag?: number;
    expiration?: Date;
    message?: string | undefined;

    constructor(data?: IAuthenticateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userInfo = _data["userInfo"] ? WAccessRequests.fromJS(_data["userInfo"]) : <any>undefined;
            this.token = _data["token"];
            if (Array.isArray(_data["userRoles"])) {
                this.userRoles = [] as any;
                for (let item of _data["userRoles"])
                    this.userRoles!.push(AppRoles.fromJS(item));
            }
            this.userRolesString = _data["userRolesString"];
            this.refreshToken = _data["refreshToken"];
            this.bIsRegistered = _data["bIsRegistered"];
            this.bIsAuthenticated = _data["bIsAuthenticated"];
            this.bIsPasswordReset = _data["bIsPasswordReset"];
            this.wAccessReuestID = _data["wAccessReuestID"];
            this.resetPasswordFlag = _data["resetPasswordFlag"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): AuthenticateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userInfo"] = this.userInfo ? this.userInfo.toJSON() : <any>undefined;
        data["token"] = this.token;
        if (Array.isArray(this.userRoles)) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        data["userRolesString"] = this.userRolesString;
        data["refreshToken"] = this.refreshToken;
        data["bIsRegistered"] = this.bIsRegistered;
        data["bIsAuthenticated"] = this.bIsAuthenticated;
        data["bIsPasswordReset"] = this.bIsPasswordReset;
        data["wAccessReuestID"] = this.wAccessReuestID;
        data["resetPasswordFlag"] = this.resetPasswordFlag;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["message"] = this.message;
        return data;
    }
}

export interface IAuthenticateResponse {
    userInfo?: WAccessRequests;
    token?: string | undefined;
    userRoles?: AppRoles[] | undefined;
    userRolesString?: string | undefined;
    refreshToken?: string | undefined;
    bIsRegistered?: boolean;
    bIsAuthenticated?: boolean;
    bIsPasswordReset?: boolean;
    wAccessReuestID?: number;
    resetPasswordFlag?: number;
    expiration?: Date;
    message?: string | undefined;
}

export class AuthenticateResponseBaseResponse implements IAuthenticateResponseBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: AuthenticateResponse;

    constructor(data?: IAuthenticateResponseBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
            this.statusCode = _data["statusCode"];
            this.response = _data["response"] ? AuthenticateResponse.fromJS(_data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticateResponseBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResponseBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        data["statusCode"] = this.statusCode;
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAuthenticateResponseBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: AuthenticateResponse;
}

export class BooleanBaseResponse implements IBooleanBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: boolean;

    constructor(data?: IBooleanBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
            this.statusCode = _data["statusCode"];
            this.response = _data["response"];
        }
    }

    static fromJS(data: any): BooleanBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        data["statusCode"] = this.statusCode;
        data["response"] = this.response;
        return data;
    }
}

export interface IBooleanBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: boolean;
}

export class ContactUs implements IContactUs {
    wUserFeedbackID?: number | undefined;
    wUserID?: number | undefined;
    wFeedbackTypeID?: number | undefined;
    feedbackStatus?: number | undefined;
    userCreated?: number | undefined;
    userModified?: number | undefined;
    userName?: string | undefined;
    firmQFCNumber?: string | undefined;
    userEmailAddress?: string | undefined;
    feedbackDesc?: string | undefined;
    dateCreated?: string | undefined;

    constructor(data?: IContactUs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wUserFeedbackID = _data["wUserFeedbackID"];
            this.wUserID = _data["wUserID"];
            this.wFeedbackTypeID = _data["wFeedbackTypeID"];
            this.feedbackStatus = _data["feedbackStatus"];
            this.userCreated = _data["userCreated"];
            this.userModified = _data["userModified"];
            this.userName = _data["userName"];
            this.firmQFCNumber = _data["firmQFCNumber"];
            this.userEmailAddress = _data["userEmailAddress"];
            this.feedbackDesc = _data["feedbackDesc"];
            this.dateCreated = _data["dateCreated"];
        }
    }

    static fromJS(data: any): ContactUs {
        data = typeof data === 'object' ? data : {};
        let result = new ContactUs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wUserFeedbackID"] = this.wUserFeedbackID;
        data["wUserID"] = this.wUserID;
        data["wFeedbackTypeID"] = this.wFeedbackTypeID;
        data["feedbackStatus"] = this.feedbackStatus;
        data["userCreated"] = this.userCreated;
        data["userModified"] = this.userModified;
        data["userName"] = this.userName;
        data["firmQFCNumber"] = this.firmQFCNumber;
        data["userEmailAddress"] = this.userEmailAddress;
        data["feedbackDesc"] = this.feedbackDesc;
        data["dateCreated"] = this.dateCreated;
        return data;
    }
}

export interface IContactUs {
    wUserFeedbackID?: number | undefined;
    wUserID?: number | undefined;
    wFeedbackTypeID?: number | undefined;
    feedbackStatus?: number | undefined;
    userCreated?: number | undefined;
    userModified?: number | undefined;
    userName?: string | undefined;
    firmQFCNumber?: string | undefined;
    userEmailAddress?: string | undefined;
    feedbackDesc?: string | undefined;
    dateCreated?: string | undefined;
}

export class ControledFunction implements IControledFunction {
    firmID?: number;
    fullName?: string | undefined;
    id?: number;
    userId?: number;
    value?: string | undefined;
    qfcNmuner?: string | undefined;
    applContactDetailID?: number;
    applicationStatusTypeID?: number;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    addressLine4?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    countryID?: string | undefined;
    countryName?: string | undefined;
    postalCode?: string | undefined;
    firmName?: string | undefined;
    functionID?: number;
    positionOfMainContact?: string | undefined;
    contactID?: number;
    nameOfMainContact?: string | undefined;
    telephoneNumber?: string | undefined;
    faxNumber?: string | undefined;
    emailAddressOfMainAccount?: string | undefined;
    preferredMethodOfContact?: string | undefined;
    primaryCaseOfficerAuthName?: string | undefined;
    primaryCaseOfficerAuthEmail?: string | undefined;
    secondryCaseOfficerAuthName?: string | undefined;
    secondryCaseOfficerAuthEmail?: string | undefined;
    primaryCaseOfficerSupName?: string | undefined;
    primaryCaseOfficerSupEmail?: string | undefined;
    secondryCaseOfficerSupName?: string | undefined;
    secondryCaseOfficerSupEmail?: string | undefined;
    additionalCaseOfficerSupEmail?: string | undefined;
    directorEmail?: string | undefined;
    qfcNumber?: string | undefined;
    aiNumber?: string | undefined;
    applicationID?: number;
    formTypeID?: number;
    applStatusTypeID?: number;
    arrangementTypeID?: number | undefined;
    arrangementTypeDesc?: string | undefined;
    arrangementTypeOtherDesc?: string | undefined;
    competenciesAndExp?: string | undefined;
    cfExcercisedDesc?: string | undefined;
    currentJobTitle?: string | undefined;
    jobTitleChangeFlag?: boolean | undefined;
    proposedJobTitle?: string | undefined;
    jobDesc?: string | undefined;
    pastPositionFlag?: boolean | undefined;
    pastPositionDesc?: string | undefined;
    fandPAddnlInfo?: string | undefined;
    fandPChangeDesc?: string | undefined;
    withdrawlReasonDesc?: string | undefined;
    altArrangementFlag?: boolean | undefined;
    altArrangementDesc?: string | undefined;
    wcfAddnlInfo?: string | undefined;
    cfApplicationDetail?: string | undefined;
    residencyNAFlag?: boolean | undefined;
    aliasesNAFlag?: boolean | undefined;
    careerHistoryNAFlag?: boolean | undefined;
    careerHistoryNAReason?: string | undefined;
    prevEmploymentFlag?: boolean | undefined;
    appUserID?: number;
    appCreatedBy?: number;
    modifiedDate?: string | undefined;
    userModified?: number;
    createdDate?: string | undefined;
    formTypeDesc?: string | undefined;
    applStatusTypeDesc?: string | undefined;
    reglsNAFlag?: boolean | undefined;
    nationalIdNAFlag?: boolean | undefined;
    qatarRelocationNAFlag?: boolean | undefined;
    profDevFalg?: boolean | undefined;
    profMembFlag?: boolean | undefined;
    higherEduFlag?: boolean | undefined;
    appStatusDate?: Date;
    appRecieveDate?: Date;
    coreApplicationID?: number;
    lstControledFunction?: ControledFunction[] | undefined;
    anyFileToAttachFlag?: boolean | undefined;
    additionalFileFlag?: boolean | undefined;
    applicationDate?: string | undefined;
    wObjectSOStatusID?: number | undefined;
    prevApplicationId?: number | undefined;
    additionalSupervisorFlag?: boolean | undefined;
    positionHeldFlag?: boolean | undefined;
    supervisingFlag?: boolean | undefined;
    resubmissionComments?: string | undefined;
    applicantName?: string | undefined;
    pageFlag?: string | undefined;
    reasonForDelayInFiling?: string | undefined;
    isOrdinarilyResidentFlag?: boolean | undefined;
    proposedRelocationDateDay?: number;
    proposedRelocationDateMonth?: number;
    proposedRelocationDateYear?: number;
    updateWobjectStatus?: boolean;
    controlFunctionID?: number | undefined;
    controlFunctionGUID?: string | undefined;
    functionTypeID?: number;
    functionTypeDesc?: string | undefined;
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
    actionTypeID?: number | undefined;
    uponApprovalFlag?: boolean | undefined;
    functionStatusID?: number;
    functionStatusDesc?: string | undefined;
    functionStatusDate?: string | undefined;
    addActionTypeDesc?: string | undefined;
    withdrawActionTypeDesc?: string | undefined;
    actionTypeDesc?: string | undefined;
    conditionalApprovalFlag?: boolean | undefined;
    activityTypeIDs?: string | undefined;
    productTypeIDs?: string | undefined;
    activityProductTypeDesc?: string | undefined;
    approvalProposedCommenceDate?: string | undefined;
    withdrawalProposedCommenceDate?: string | undefined;
    approvalCommenceUponApplApprovalFlag?: boolean;
    withdrawalCommenceUponApplApprovalFlag?: boolean;

    constructor(data?: IControledFunction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firmID = _data["firmID"];
            this.fullName = _data["fullName"];
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.value = _data["value"];
            this.qfcNmuner = _data["qfcNmuner"];
            this.applContactDetailID = _data["applContactDetailID"];
            this.applicationStatusTypeID = _data["applicationStatusTypeID"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.addressLine3 = _data["addressLine3"];
            this.addressLine4 = _data["addressLine4"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.countryID = _data["countryID"];
            this.countryName = _data["countryName"];
            this.postalCode = _data["postalCode"];
            this.firmName = _data["firmName"];
            this.functionID = _data["functionID"];
            this.positionOfMainContact = _data["positionOfMainContact"];
            this.contactID = _data["contactID"];
            this.nameOfMainContact = _data["nameOfMainContact"];
            this.telephoneNumber = _data["telephoneNumber"];
            this.faxNumber = _data["faxNumber"];
            this.emailAddressOfMainAccount = _data["emailAddressOfMainAccount"];
            this.preferredMethodOfContact = _data["preferredMethodOfContact"];
            this.primaryCaseOfficerAuthName = _data["primaryCaseOfficerAuthName"];
            this.primaryCaseOfficerAuthEmail = _data["primaryCaseOfficerAuthEmail"];
            this.secondryCaseOfficerAuthName = _data["secondryCaseOfficerAuthName"];
            this.secondryCaseOfficerAuthEmail = _data["secondryCaseOfficerAuthEmail"];
            this.primaryCaseOfficerSupName = _data["primaryCaseOfficerSupName"];
            this.primaryCaseOfficerSupEmail = _data["primaryCaseOfficerSupEmail"];
            this.secondryCaseOfficerSupName = _data["secondryCaseOfficerSupName"];
            this.secondryCaseOfficerSupEmail = _data["secondryCaseOfficerSupEmail"];
            this.additionalCaseOfficerSupEmail = _data["additionalCaseOfficerSupEmail"];
            this.directorEmail = _data["directorEmail"];
            this.qfcNumber = _data["qfcNumber"];
            this.aiNumber = _data["aiNumber"];
            this.applicationID = _data["applicationID"];
            this.formTypeID = _data["formTypeID"];
            this.applStatusTypeID = _data["applStatusTypeID"];
            this.arrangementTypeID = _data["arrangementTypeID"];
            this.arrangementTypeDesc = _data["arrangementTypeDesc"];
            this.arrangementTypeOtherDesc = _data["arrangementTypeOtherDesc"];
            this.competenciesAndExp = _data["competenciesAndExp"];
            this.cfExcercisedDesc = _data["cfExcercisedDesc"];
            this.currentJobTitle = _data["currentJobTitle"];
            this.jobTitleChangeFlag = _data["jobTitleChangeFlag"];
            this.proposedJobTitle = _data["proposedJobTitle"];
            this.jobDesc = _data["jobDesc"];
            this.pastPositionFlag = _data["pastPositionFlag"];
            this.pastPositionDesc = _data["pastPositionDesc"];
            this.fandPAddnlInfo = _data["fandPAddnlInfo"];
            this.fandPChangeDesc = _data["fandPChangeDesc"];
            this.withdrawlReasonDesc = _data["withdrawlReasonDesc"];
            this.altArrangementFlag = _data["altArrangementFlag"];
            this.altArrangementDesc = _data["altArrangementDesc"];
            this.wcfAddnlInfo = _data["wcfAddnlInfo"];
            this.cfApplicationDetail = _data["cfApplicationDetail"];
            this.residencyNAFlag = _data["residencyNAFlag"];
            this.aliasesNAFlag = _data["aliasesNAFlag"];
            this.careerHistoryNAFlag = _data["careerHistoryNAFlag"];
            this.careerHistoryNAReason = _data["careerHistoryNAReason"];
            this.prevEmploymentFlag = _data["prevEmploymentFlag"];
            this.appUserID = _data["appUserID"];
            this.appCreatedBy = _data["appCreatedBy"];
            this.modifiedDate = _data["modifiedDate"];
            this.userModified = _data["userModified"];
            this.createdDate = _data["createdDate"];
            this.formTypeDesc = _data["formTypeDesc"];
            this.applStatusTypeDesc = _data["applStatusTypeDesc"];
            this.reglsNAFlag = _data["reglsNAFlag"];
            this.nationalIdNAFlag = _data["nationalIdNAFlag"];
            this.qatarRelocationNAFlag = _data["qatarRelocationNAFlag"];
            this.profDevFalg = _data["profDevFalg"];
            this.profMembFlag = _data["profMembFlag"];
            this.higherEduFlag = _data["higherEduFlag"];
            this.appStatusDate = _data["appStatusDate"] ? new Date(_data["appStatusDate"].toString()) : <any>undefined;
            this.appRecieveDate = _data["appRecieveDate"] ? new Date(_data["appRecieveDate"].toString()) : <any>undefined;
            this.coreApplicationID = _data["coreApplicationID"];
            if (Array.isArray(_data["lstControledFunction"])) {
                this.lstControledFunction = [] as any;
                for (let item of _data["lstControledFunction"])
                    this.lstControledFunction!.push(ControledFunction.fromJS(item));
            }
            this.anyFileToAttachFlag = _data["anyFileToAttachFlag"];
            this.additionalFileFlag = _data["additionalFileFlag"];
            this.applicationDate = _data["applicationDate"];
            this.wObjectSOStatusID = _data["wObjectSOStatusID"];
            this.prevApplicationId = _data["prevApplicationId"];
            this.additionalSupervisorFlag = _data["additionalSupervisorFlag"];
            this.positionHeldFlag = _data["positionHeldFlag"];
            this.supervisingFlag = _data["supervisingFlag"];
            this.resubmissionComments = _data["resubmissionComments"];
            this.applicantName = _data["applicantName"];
            this.pageFlag = _data["pageFlag"];
            this.reasonForDelayInFiling = _data["reasonForDelayInFiling"];
            this.isOrdinarilyResidentFlag = _data["isOrdinarilyResidentFlag"];
            this.proposedRelocationDateDay = _data["proposedRelocationDateDay"];
            this.proposedRelocationDateMonth = _data["proposedRelocationDateMonth"];
            this.proposedRelocationDateYear = _data["proposedRelocationDateYear"];
            this.updateWobjectStatus = _data["updateWobjectStatus"];
            this.controlFunctionID = _data["controlFunctionID"];
            this.controlFunctionGUID = _data["controlFunctionGUID"];
            this.functionTypeID = _data["functionTypeID"];
            this.functionTypeDesc = _data["functionTypeDesc"];
            this.day = _data["day"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.actionTypeID = _data["actionTypeID"];
            this.uponApprovalFlag = _data["uponApprovalFlag"];
            this.functionStatusID = _data["functionStatusID"];
            this.functionStatusDesc = _data["functionStatusDesc"];
            this.functionStatusDate = _data["functionStatusDate"];
            this.addActionTypeDesc = _data["addActionTypeDesc"];
            this.withdrawActionTypeDesc = _data["withdrawActionTypeDesc"];
            this.actionTypeDesc = _data["actionTypeDesc"];
            this.conditionalApprovalFlag = _data["conditionalApprovalFlag"];
            this.activityTypeIDs = _data["activityTypeIDs"];
            this.productTypeIDs = _data["productTypeIDs"];
            this.activityProductTypeDesc = _data["activityProductTypeDesc"];
            this.approvalProposedCommenceDate = _data["approvalProposedCommenceDate"];
            this.withdrawalProposedCommenceDate = _data["withdrawalProposedCommenceDate"];
            this.approvalCommenceUponApplApprovalFlag = _data["approvalCommenceUponApplApprovalFlag"];
            this.withdrawalCommenceUponApplApprovalFlag = _data["withdrawalCommenceUponApplApprovalFlag"];
        }
    }

    static fromJS(data: any): ControledFunction {
        data = typeof data === 'object' ? data : {};
        let result = new ControledFunction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firmID"] = this.firmID;
        data["fullName"] = this.fullName;
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["value"] = this.value;
        data["qfcNmuner"] = this.qfcNmuner;
        data["applContactDetailID"] = this.applContactDetailID;
        data["applicationStatusTypeID"] = this.applicationStatusTypeID;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["addressLine3"] = this.addressLine3;
        data["addressLine4"] = this.addressLine4;
        data["city"] = this.city;
        data["state"] = this.state;
        data["countryID"] = this.countryID;
        data["countryName"] = this.countryName;
        data["postalCode"] = this.postalCode;
        data["firmName"] = this.firmName;
        data["functionID"] = this.functionID;
        data["positionOfMainContact"] = this.positionOfMainContact;
        data["contactID"] = this.contactID;
        data["nameOfMainContact"] = this.nameOfMainContact;
        data["telephoneNumber"] = this.telephoneNumber;
        data["faxNumber"] = this.faxNumber;
        data["emailAddressOfMainAccount"] = this.emailAddressOfMainAccount;
        data["preferredMethodOfContact"] = this.preferredMethodOfContact;
        data["primaryCaseOfficerAuthName"] = this.primaryCaseOfficerAuthName;
        data["primaryCaseOfficerAuthEmail"] = this.primaryCaseOfficerAuthEmail;
        data["secondryCaseOfficerAuthName"] = this.secondryCaseOfficerAuthName;
        data["secondryCaseOfficerAuthEmail"] = this.secondryCaseOfficerAuthEmail;
        data["primaryCaseOfficerSupName"] = this.primaryCaseOfficerSupName;
        data["primaryCaseOfficerSupEmail"] = this.primaryCaseOfficerSupEmail;
        data["secondryCaseOfficerSupName"] = this.secondryCaseOfficerSupName;
        data["secondryCaseOfficerSupEmail"] = this.secondryCaseOfficerSupEmail;
        data["additionalCaseOfficerSupEmail"] = this.additionalCaseOfficerSupEmail;
        data["directorEmail"] = this.directorEmail;
        data["qfcNumber"] = this.qfcNumber;
        data["aiNumber"] = this.aiNumber;
        data["applicationID"] = this.applicationID;
        data["formTypeID"] = this.formTypeID;
        data["applStatusTypeID"] = this.applStatusTypeID;
        data["arrangementTypeID"] = this.arrangementTypeID;
        data["arrangementTypeDesc"] = this.arrangementTypeDesc;
        data["arrangementTypeOtherDesc"] = this.arrangementTypeOtherDesc;
        data["competenciesAndExp"] = this.competenciesAndExp;
        data["cfExcercisedDesc"] = this.cfExcercisedDesc;
        data["currentJobTitle"] = this.currentJobTitle;
        data["jobTitleChangeFlag"] = this.jobTitleChangeFlag;
        data["proposedJobTitle"] = this.proposedJobTitle;
        data["jobDesc"] = this.jobDesc;
        data["pastPositionFlag"] = this.pastPositionFlag;
        data["pastPositionDesc"] = this.pastPositionDesc;
        data["fandPAddnlInfo"] = this.fandPAddnlInfo;
        data["fandPChangeDesc"] = this.fandPChangeDesc;
        data["withdrawlReasonDesc"] = this.withdrawlReasonDesc;
        data["altArrangementFlag"] = this.altArrangementFlag;
        data["altArrangementDesc"] = this.altArrangementDesc;
        data["wcfAddnlInfo"] = this.wcfAddnlInfo;
        data["cfApplicationDetail"] = this.cfApplicationDetail;
        data["residencyNAFlag"] = this.residencyNAFlag;
        data["aliasesNAFlag"] = this.aliasesNAFlag;
        data["careerHistoryNAFlag"] = this.careerHistoryNAFlag;
        data["careerHistoryNAReason"] = this.careerHistoryNAReason;
        data["prevEmploymentFlag"] = this.prevEmploymentFlag;
        data["appUserID"] = this.appUserID;
        data["appCreatedBy"] = this.appCreatedBy;
        data["modifiedDate"] = this.modifiedDate;
        data["userModified"] = this.userModified;
        data["createdDate"] = this.createdDate;
        data["formTypeDesc"] = this.formTypeDesc;
        data["applStatusTypeDesc"] = this.applStatusTypeDesc;
        data["reglsNAFlag"] = this.reglsNAFlag;
        data["nationalIdNAFlag"] = this.nationalIdNAFlag;
        data["qatarRelocationNAFlag"] = this.qatarRelocationNAFlag;
        data["profDevFalg"] = this.profDevFalg;
        data["profMembFlag"] = this.profMembFlag;
        data["higherEduFlag"] = this.higherEduFlag;
        data["appStatusDate"] = this.appStatusDate ? this.appStatusDate.toISOString() : <any>undefined;
        data["appRecieveDate"] = this.appRecieveDate ? this.appRecieveDate.toISOString() : <any>undefined;
        data["coreApplicationID"] = this.coreApplicationID;
        if (Array.isArray(this.lstControledFunction)) {
            data["lstControledFunction"] = [];
            for (let item of this.lstControledFunction)
                data["lstControledFunction"].push(item.toJSON());
        }
        data["anyFileToAttachFlag"] = this.anyFileToAttachFlag;
        data["additionalFileFlag"] = this.additionalFileFlag;
        data["applicationDate"] = this.applicationDate;
        data["wObjectSOStatusID"] = this.wObjectSOStatusID;
        data["prevApplicationId"] = this.prevApplicationId;
        data["additionalSupervisorFlag"] = this.additionalSupervisorFlag;
        data["positionHeldFlag"] = this.positionHeldFlag;
        data["supervisingFlag"] = this.supervisingFlag;
        data["resubmissionComments"] = this.resubmissionComments;
        data["applicantName"] = this.applicantName;
        data["pageFlag"] = this.pageFlag;
        data["reasonForDelayInFiling"] = this.reasonForDelayInFiling;
        data["isOrdinarilyResidentFlag"] = this.isOrdinarilyResidentFlag;
        data["proposedRelocationDateDay"] = this.proposedRelocationDateDay;
        data["proposedRelocationDateMonth"] = this.proposedRelocationDateMonth;
        data["proposedRelocationDateYear"] = this.proposedRelocationDateYear;
        data["updateWobjectStatus"] = this.updateWobjectStatus;
        data["controlFunctionID"] = this.controlFunctionID;
        data["controlFunctionGUID"] = this.controlFunctionGUID;
        data["functionTypeID"] = this.functionTypeID;
        data["functionTypeDesc"] = this.functionTypeDesc;
        data["day"] = this.day;
        data["month"] = this.month;
        data["year"] = this.year;
        data["actionTypeID"] = this.actionTypeID;
        data["uponApprovalFlag"] = this.uponApprovalFlag;
        data["functionStatusID"] = this.functionStatusID;
        data["functionStatusDesc"] = this.functionStatusDesc;
        data["functionStatusDate"] = this.functionStatusDate;
        data["addActionTypeDesc"] = this.addActionTypeDesc;
        data["withdrawActionTypeDesc"] = this.withdrawActionTypeDesc;
        data["actionTypeDesc"] = this.actionTypeDesc;
        data["conditionalApprovalFlag"] = this.conditionalApprovalFlag;
        data["activityTypeIDs"] = this.activityTypeIDs;
        data["productTypeIDs"] = this.productTypeIDs;
        data["activityProductTypeDesc"] = this.activityProductTypeDesc;
        data["approvalProposedCommenceDate"] = this.approvalProposedCommenceDate;
        data["withdrawalProposedCommenceDate"] = this.withdrawalProposedCommenceDate;
        data["approvalCommenceUponApplApprovalFlag"] = this.approvalCommenceUponApplApprovalFlag;
        data["withdrawalCommenceUponApplApprovalFlag"] = this.withdrawalCommenceUponApplApprovalFlag;
        return data;
    }
}

export interface IControledFunction {
    firmID?: number;
    fullName?: string | undefined;
    id?: number;
    userId?: number;
    value?: string | undefined;
    qfcNmuner?: string | undefined;
    applContactDetailID?: number;
    applicationStatusTypeID?: number;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    addressLine4?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    countryID?: string | undefined;
    countryName?: string | undefined;
    postalCode?: string | undefined;
    firmName?: string | undefined;
    functionID?: number;
    positionOfMainContact?: string | undefined;
    contactID?: number;
    nameOfMainContact?: string | undefined;
    telephoneNumber?: string | undefined;
    faxNumber?: string | undefined;
    emailAddressOfMainAccount?: string | undefined;
    preferredMethodOfContact?: string | undefined;
    primaryCaseOfficerAuthName?: string | undefined;
    primaryCaseOfficerAuthEmail?: string | undefined;
    secondryCaseOfficerAuthName?: string | undefined;
    secondryCaseOfficerAuthEmail?: string | undefined;
    primaryCaseOfficerSupName?: string | undefined;
    primaryCaseOfficerSupEmail?: string | undefined;
    secondryCaseOfficerSupName?: string | undefined;
    secondryCaseOfficerSupEmail?: string | undefined;
    additionalCaseOfficerSupEmail?: string | undefined;
    directorEmail?: string | undefined;
    qfcNumber?: string | undefined;
    aiNumber?: string | undefined;
    applicationID?: number;
    formTypeID?: number;
    applStatusTypeID?: number;
    arrangementTypeID?: number | undefined;
    arrangementTypeDesc?: string | undefined;
    arrangementTypeOtherDesc?: string | undefined;
    competenciesAndExp?: string | undefined;
    cfExcercisedDesc?: string | undefined;
    currentJobTitle?: string | undefined;
    jobTitleChangeFlag?: boolean | undefined;
    proposedJobTitle?: string | undefined;
    jobDesc?: string | undefined;
    pastPositionFlag?: boolean | undefined;
    pastPositionDesc?: string | undefined;
    fandPAddnlInfo?: string | undefined;
    fandPChangeDesc?: string | undefined;
    withdrawlReasonDesc?: string | undefined;
    altArrangementFlag?: boolean | undefined;
    altArrangementDesc?: string | undefined;
    wcfAddnlInfo?: string | undefined;
    cfApplicationDetail?: string | undefined;
    residencyNAFlag?: boolean | undefined;
    aliasesNAFlag?: boolean | undefined;
    careerHistoryNAFlag?: boolean | undefined;
    careerHistoryNAReason?: string | undefined;
    prevEmploymentFlag?: boolean | undefined;
    appUserID?: number;
    appCreatedBy?: number;
    modifiedDate?: string | undefined;
    userModified?: number;
    createdDate?: string | undefined;
    formTypeDesc?: string | undefined;
    applStatusTypeDesc?: string | undefined;
    reglsNAFlag?: boolean | undefined;
    nationalIdNAFlag?: boolean | undefined;
    qatarRelocationNAFlag?: boolean | undefined;
    profDevFalg?: boolean | undefined;
    profMembFlag?: boolean | undefined;
    higherEduFlag?: boolean | undefined;
    appStatusDate?: Date;
    appRecieveDate?: Date;
    coreApplicationID?: number;
    lstControledFunction?: ControledFunction[] | undefined;
    anyFileToAttachFlag?: boolean | undefined;
    additionalFileFlag?: boolean | undefined;
    applicationDate?: string | undefined;
    wObjectSOStatusID?: number | undefined;
    prevApplicationId?: number | undefined;
    additionalSupervisorFlag?: boolean | undefined;
    positionHeldFlag?: boolean | undefined;
    supervisingFlag?: boolean | undefined;
    resubmissionComments?: string | undefined;
    applicantName?: string | undefined;
    pageFlag?: string | undefined;
    reasonForDelayInFiling?: string | undefined;
    isOrdinarilyResidentFlag?: boolean | undefined;
    proposedRelocationDateDay?: number;
    proposedRelocationDateMonth?: number;
    proposedRelocationDateYear?: number;
    updateWobjectStatus?: boolean;
    controlFunctionID?: number | undefined;
    controlFunctionGUID?: string | undefined;
    functionTypeID?: number;
    functionTypeDesc?: string | undefined;
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
    actionTypeID?: number | undefined;
    uponApprovalFlag?: boolean | undefined;
    functionStatusID?: number;
    functionStatusDesc?: string | undefined;
    functionStatusDate?: string | undefined;
    addActionTypeDesc?: string | undefined;
    withdrawActionTypeDesc?: string | undefined;
    actionTypeDesc?: string | undefined;
    conditionalApprovalFlag?: boolean | undefined;
    activityTypeIDs?: string | undefined;
    productTypeIDs?: string | undefined;
    activityProductTypeDesc?: string | undefined;
    approvalProposedCommenceDate?: string | undefined;
    withdrawalProposedCommenceDate?: string | undefined;
    approvalCommenceUponApplApprovalFlag?: boolean;
    withdrawalCommenceUponApplApprovalFlag?: boolean;
}

export class Int32BaseResponse implements IInt32BaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: number;

    constructor(data?: IInt32BaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
            this.statusCode = _data["statusCode"];
            this.response = _data["response"];
        }
    }

    static fromJS(data: any): Int32BaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Int32BaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        data["statusCode"] = this.statusCode;
        data["response"] = this.response;
        return data;
    }
}

export interface IInt32BaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: number;
}

export class ObjTasks implements IObjTasks {
    wObjTaskID?: number | undefined;
    wObjectID?: number | undefined;
    wObjInstanceID?: number | undefined;
    wObjTaskSyncStatusTypeID?: number | undefined;
    wObjectEventTypeID?: number | undefined;
    dateCreated?: Date | undefined;
    userCreated?: number | undefined;

    constructor(data?: IObjTasks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wObjTaskID = _data["wObjTaskID"];
            this.wObjectID = _data["wObjectID"];
            this.wObjInstanceID = _data["wObjInstanceID"];
            this.wObjTaskSyncStatusTypeID = _data["wObjTaskSyncStatusTypeID"];
            this.wObjectEventTypeID = _data["wObjectEventTypeID"];
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
            this.userCreated = _data["userCreated"];
        }
    }

    static fromJS(data: any): ObjTasks {
        data = typeof data === 'object' ? data : {};
        let result = new ObjTasks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wObjTaskID"] = this.wObjTaskID;
        data["wObjectID"] = this.wObjectID;
        data["wObjInstanceID"] = this.wObjInstanceID;
        data["wObjTaskSyncStatusTypeID"] = this.wObjTaskSyncStatusTypeID;
        data["wObjectEventTypeID"] = this.wObjectEventTypeID;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["userCreated"] = this.userCreated;
        return data;
    }
}

export interface IObjTasks {
    wObjTaskID?: number | undefined;
    wObjectID?: number | undefined;
    wObjInstanceID?: number | undefined;
    wObjTaskSyncStatusTypeID?: number | undefined;
    wObjectEventTypeID?: number | undefined;
    dateCreated?: Date | undefined;
    userCreated?: number | undefined;
}

export class ObjTasksListBaseResponse implements IObjTasksListBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: ObjTasks[] | undefined;

    constructor(data?: IObjTasksListBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
            this.statusCode = _data["statusCode"];
            if (Array.isArray(_data["response"])) {
                this.response = [] as any;
                for (let item of _data["response"])
                    this.response!.push(ObjTasks.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ObjTasksListBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ObjTasksListBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        data["statusCode"] = this.statusCode;
        if (Array.isArray(this.response)) {
            data["response"] = [];
            for (let item of this.response)
                data["response"].push(item.toJSON());
        }
        return data;
    }
}

export interface IObjTasksListBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: ObjTasks[] | undefined;
}

export class StringStringDictionaryBaseResponse implements IStringStringDictionaryBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: { [key: string]: string; } | undefined;

    constructor(data?: IStringStringDictionaryBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
            this.statusCode = _data["statusCode"];
            if (_data["response"]) {
                this.response = {} as any;
                for (let key in _data["response"]) {
                    if (_data["response"].hasOwnProperty(key))
                        (<any>this.response)![key] = _data["response"][key];
                }
            }
        }
    }

    static fromJS(data: any): StringStringDictionaryBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringDictionaryBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        data["statusCode"] = this.statusCode;
        if (this.response) {
            data["response"] = {};
            for (let key in this.response) {
                if (this.response.hasOwnProperty(key))
                    (<any>data["response"])[key] = (<any>this.response)[key];
            }
        }
        return data;
    }
}

export interface IStringStringDictionaryBaseResponse {
    isSuccess?: boolean;
    errorMessage?: string | undefined;
    statusCode?: number;
    response?: { [key: string]: string; } | undefined;
}

export class WAccessRequests implements IWAccessRequests {
    wAccessRequestID?: number | undefined;
    firmQFCNo?: string | undefined;
    firmName?: string | undefined;
    firmTypeID?: number;
    firmTypeDesc?: string | undefined;
    contactID?: number;
    individualName?: string | undefined;
    aiNumber?: string | undefined;
    individualJobTitle?: string | undefined;
    individualDateOfBirth?: string | undefined;
    individualNationality?: string | undefined;
    individualEmailAddress?: string | undefined;
    registrationCode?: string | undefined;
    registrationPassword?: string | undefined;
    registrationDate?: string | undefined;
    isRegistered?: boolean;
    createdBy?: number;
    createdDate?: string | undefined;
    accountLocked?: boolean;
    isAccountExpired?: boolean;
    isLoggedIn?: boolean;
    isActiveUser?: boolean;
    isAccountExists?: boolean;
    isValidReqeust?: boolean | undefined;
    wFunctionTypeIDsList?: string | undefined;
    withdrawnFunctionTypeIDsList?: string | undefined;
    wRequestTypeID?: number;
    wRequestTypeDesc?: string | undefined;
    registrationStatus?: string | undefined;
    wUserAccountTypeID?: number;
    wUserAccountTypeDesc?: string | undefined;
    roleId?: number | undefined;
    roleDesc?: string | undefined;
    wUserID?: number | undefined;
    wUserLoginID?: number | undefined;
    isRecordInsert?: boolean;
    isSEF?: boolean;
    isSessionActive?: boolean;
    passwordChangeDate?: Date | undefined;
    userPassword?: string | undefined;
    lstApplicationDetail?: ApplicationDetail[] | undefined;
    wObjectID?: number | undefined;
    wRoleStartDate?: string | undefined;
    lstWUserRoles?: WUserRoles[] | undefined;
    objectID?: number | undefined;

    constructor(data?: IWAccessRequests) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wAccessRequestID = _data["wAccessRequestID"];
            this.firmQFCNo = _data["firmQFCNo"];
            this.firmName = _data["firmName"];
            this.firmTypeID = _data["firmTypeID"];
            this.firmTypeDesc = _data["firmTypeDesc"];
            this.contactID = _data["contactID"];
            this.individualName = _data["individualName"];
            this.aiNumber = _data["aiNumber"];
            this.individualJobTitle = _data["individualJobTitle"];
            this.individualDateOfBirth = _data["individualDateOfBirth"];
            this.individualNationality = _data["individualNationality"];
            this.individualEmailAddress = _data["individualEmailAddress"];
            this.registrationCode = _data["registrationCode"];
            this.registrationPassword = _data["registrationPassword"];
            this.registrationDate = _data["registrationDate"];
            this.isRegistered = _data["isRegistered"];
            this.createdBy = _data["createdBy"];
            this.createdDate = _data["createdDate"];
            this.accountLocked = _data["accountLocked"];
            this.isAccountExpired = _data["isAccountExpired"];
            this.isLoggedIn = _data["isLoggedIn"];
            this.isActiveUser = _data["isActiveUser"];
            this.isAccountExists = _data["isAccountExists"];
            this.isValidReqeust = _data["isValidReqeust"];
            this.wFunctionTypeIDsList = _data["wFunctionTypeIDsList"];
            this.withdrawnFunctionTypeIDsList = _data["withdrawnFunctionTypeIDsList"];
            this.wRequestTypeID = _data["wRequestTypeID"];
            this.wRequestTypeDesc = _data["wRequestTypeDesc"];
            this.registrationStatus = _data["registrationStatus"];
            this.wUserAccountTypeID = _data["wUserAccountTypeID"];
            this.wUserAccountTypeDesc = _data["wUserAccountTypeDesc"];
            this.roleId = _data["roleId"];
            this.roleDesc = _data["roleDesc"];
            this.wUserID = _data["wUserID"];
            this.wUserLoginID = _data["wUserLoginID"];
            this.isRecordInsert = _data["isRecordInsert"];
            this.isSEF = _data["isSEF"];
            this.isSessionActive = _data["isSessionActive"];
            this.passwordChangeDate = _data["passwordChangeDate"] ? new Date(_data["passwordChangeDate"].toString()) : <any>undefined;
            this.userPassword = _data["userPassword"];
            if (Array.isArray(_data["lstApplicationDetail"])) {
                this.lstApplicationDetail = [] as any;
                for (let item of _data["lstApplicationDetail"])
                    this.lstApplicationDetail!.push(ApplicationDetail.fromJS(item));
            }
            this.wObjectID = _data["wObjectID"];
            this.wRoleStartDate = _data["wRoleStartDate"];
            if (Array.isArray(_data["lstWUserRoles"])) {
                this.lstWUserRoles = [] as any;
                for (let item of _data["lstWUserRoles"])
                    this.lstWUserRoles!.push(WUserRoles.fromJS(item));
            }
            this.objectID = _data["objectID"];
        }
    }

    static fromJS(data: any): WAccessRequests {
        data = typeof data === 'object' ? data : {};
        let result = new WAccessRequests();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wAccessRequestID"] = this.wAccessRequestID;
        data["firmQFCNo"] = this.firmQFCNo;
        data["firmName"] = this.firmName;
        data["firmTypeID"] = this.firmTypeID;
        data["firmTypeDesc"] = this.firmTypeDesc;
        data["contactID"] = this.contactID;
        data["individualName"] = this.individualName;
        data["aiNumber"] = this.aiNumber;
        data["individualJobTitle"] = this.individualJobTitle;
        data["individualDateOfBirth"] = this.individualDateOfBirth;
        data["individualNationality"] = this.individualNationality;
        data["individualEmailAddress"] = this.individualEmailAddress;
        data["registrationCode"] = this.registrationCode;
        data["registrationPassword"] = this.registrationPassword;
        data["registrationDate"] = this.registrationDate;
        data["isRegistered"] = this.isRegistered;
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate;
        data["accountLocked"] = this.accountLocked;
        data["isAccountExpired"] = this.isAccountExpired;
        data["isLoggedIn"] = this.isLoggedIn;
        data["isActiveUser"] = this.isActiveUser;
        data["isAccountExists"] = this.isAccountExists;
        data["isValidReqeust"] = this.isValidReqeust;
        data["wFunctionTypeIDsList"] = this.wFunctionTypeIDsList;
        data["withdrawnFunctionTypeIDsList"] = this.withdrawnFunctionTypeIDsList;
        data["wRequestTypeID"] = this.wRequestTypeID;
        data["wRequestTypeDesc"] = this.wRequestTypeDesc;
        data["registrationStatus"] = this.registrationStatus;
        data["wUserAccountTypeID"] = this.wUserAccountTypeID;
        data["wUserAccountTypeDesc"] = this.wUserAccountTypeDesc;
        data["roleId"] = this.roleId;
        data["roleDesc"] = this.roleDesc;
        data["wUserID"] = this.wUserID;
        data["wUserLoginID"] = this.wUserLoginID;
        data["isRecordInsert"] = this.isRecordInsert;
        data["isSEF"] = this.isSEF;
        data["isSessionActive"] = this.isSessionActive;
        data["passwordChangeDate"] = this.passwordChangeDate ? this.passwordChangeDate.toISOString() : <any>undefined;
        data["userPassword"] = this.userPassword;
        if (Array.isArray(this.lstApplicationDetail)) {
            data["lstApplicationDetail"] = [];
            for (let item of this.lstApplicationDetail)
                data["lstApplicationDetail"].push(item.toJSON());
        }
        data["wObjectID"] = this.wObjectID;
        data["wRoleStartDate"] = this.wRoleStartDate;
        if (Array.isArray(this.lstWUserRoles)) {
            data["lstWUserRoles"] = [];
            for (let item of this.lstWUserRoles)
                data["lstWUserRoles"].push(item.toJSON());
        }
        data["objectID"] = this.objectID;
        return data;
    }
}

export interface IWAccessRequests {
    wAccessRequestID?: number | undefined;
    firmQFCNo?: string | undefined;
    firmName?: string | undefined;
    firmTypeID?: number;
    firmTypeDesc?: string | undefined;
    contactID?: number;
    individualName?: string | undefined;
    aiNumber?: string | undefined;
    individualJobTitle?: string | undefined;
    individualDateOfBirth?: string | undefined;
    individualNationality?: string | undefined;
    individualEmailAddress?: string | undefined;
    registrationCode?: string | undefined;
    registrationPassword?: string | undefined;
    registrationDate?: string | undefined;
    isRegistered?: boolean;
    createdBy?: number;
    createdDate?: string | undefined;
    accountLocked?: boolean;
    isAccountExpired?: boolean;
    isLoggedIn?: boolean;
    isActiveUser?: boolean;
    isAccountExists?: boolean;
    isValidReqeust?: boolean | undefined;
    wFunctionTypeIDsList?: string | undefined;
    withdrawnFunctionTypeIDsList?: string | undefined;
    wRequestTypeID?: number;
    wRequestTypeDesc?: string | undefined;
    registrationStatus?: string | undefined;
    wUserAccountTypeID?: number;
    wUserAccountTypeDesc?: string | undefined;
    roleId?: number | undefined;
    roleDesc?: string | undefined;
    wUserID?: number | undefined;
    wUserLoginID?: number | undefined;
    isRecordInsert?: boolean;
    isSEF?: boolean;
    isSessionActive?: boolean;
    passwordChangeDate?: Date | undefined;
    userPassword?: string | undefined;
    lstApplicationDetail?: ApplicationDetail[] | undefined;
    wObjectID?: number | undefined;
    wRoleStartDate?: string | undefined;
    lstWUserRoles?: WUserRoles[] | undefined;
    objectID?: number | undefined;
}

export class WUserRoles implements IWUserRoles {
    wUserRoleID?: number;
    wFunctionTypeID?: number;
    waccessRequestID?: number;
    wRoleID?: number;
    wRoleStartDate?: string | undefined;
    roleValid?: number;
    wUserID?: number;
    createdBy?: number;
    wObjectID?: number | undefined;

    constructor(data?: IWUserRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wUserRoleID = _data["wUserRoleID"];
            this.wFunctionTypeID = _data["wFunctionTypeID"];
            this.waccessRequestID = _data["waccessRequestID"];
            this.wRoleID = _data["wRoleID"];
            this.wRoleStartDate = _data["wRoleStartDate"];
            this.roleValid = _data["roleValid"];
            this.wUserID = _data["wUserID"];
            this.createdBy = _data["createdBy"];
            this.wObjectID = _data["wObjectID"];
        }
    }

    static fromJS(data: any): WUserRoles {
        data = typeof data === 'object' ? data : {};
        let result = new WUserRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wUserRoleID"] = this.wUserRoleID;
        data["wFunctionTypeID"] = this.wFunctionTypeID;
        data["waccessRequestID"] = this.waccessRequestID;
        data["wRoleID"] = this.wRoleID;
        data["wRoleStartDate"] = this.wRoleStartDate;
        data["roleValid"] = this.roleValid;
        data["wUserID"] = this.wUserID;
        data["createdBy"] = this.createdBy;
        data["wObjectID"] = this.wObjectID;
        return data;
    }
}

export interface IWUserRoles {
    wUserRoleID?: number;
    wFunctionTypeID?: number;
    waccessRequestID?: number;
    wRoleID?: number;
    wRoleStartDate?: string | undefined;
    roleValid?: number;
    wUserID?: number;
    createdBy?: number;
    wObjectID?: number | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}