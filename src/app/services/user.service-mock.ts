import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { PaginatedResponse } from '../models/user.model';
import { User } from '../models/user.model';

@Injectable()
export class MockUserManagementService {
  private mockUsers: Partial<User>[] = [
    {
      wUserId: 1,
      wAccessRequestId: '101',
      qfcNumber: 'QFC001',
      firmName: 'Test Firm 1',
      individualName: 'John Doe',
      individualEmailAddress: 'john@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 1,
      firmTypeDesc: 'Corporate',
      roleIds: [1, 2],
      activeRoleIds: [1],
      roleDescription: 'Admin, User',
      emailAddress: 'john.doe@example.com',
      userName: 'johndoe',
      roles: ['Admin', 'User'],
   
      note: 'Sample note',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 2,
      wAccessRequestId: '102',
      qfcNumber: 'QFC002',
      firmName: 'Test Firm 2',
      individualName: 'Jane Smith',
      individualEmailAddress: 'jane@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 2,
      firmTypeDesc: 'Individual',
      roleIds: [2],
      activeRoleIds: [2],
      roleDescription: 'User',
      emailAddress: 'jane.smith@example.com',
      userName: 'janesmith',
      roles: ['User'],
      serviceRequestId: '202',
      note: 'Sample note 2',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 3,
      wAccessRequestId: '103',
      qfcNumber: 'QFC003',
      firmName: 'Test Firm 3',
      individualName: 'Alice Johnson',
      individualEmailAddress: 'alice@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 1,
      firmTypeDesc: 'Corporate',
      roleIds: [1],
      activeRoleIds: [1],
      roleDescription: 'Admin',
      emailAddress: 'alice.johnson@example.com',
      userName: 'alicejohnson',
      roles: ['Admin'],
      serviceRequestId: '203',
      note: 'Sample note 3',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 4,
      wAccessRequestId: '104',
      qfcNumber: 'QFC004',
      firmName: 'Test Firm 4',
      individualName: 'Bob Brown',
      individualEmailAddress: 'bob@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 2,
      firmTypeDesc: 'Individual',
      roleIds: [2],
      activeRoleIds: [2],
      roleDescription: 'User',
      emailAddress: 'bob.brown@example.com',
      userName: 'bobbrown',
      roles: ['User'],
      serviceRequestId: '204',
      note: 'Sample note 4',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 5,
      wAccessRequestId: '105',
      qfcNumber: 'QFC005',
      firmName: 'Test Firm 5',
      individualName: 'Charlie Davis',
      individualEmailAddress: 'charlie@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 1,
      firmTypeDesc: 'Corporate',
      roleIds: [1, 2],
      activeRoleIds: [1],
      roleDescription: 'Admin, User',
      emailAddress: 'charlie.davis@example.com',
      userName: 'charliedavis',
      roles: ['Admin', 'User'],
      serviceRequestId: '205',
      note: 'Sample note 5',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 6,
      wAccessRequestId: '106',
      qfcNumber: 'QFC006',
      firmName: 'Test Firm 6',
      individualName: 'David Evans',
      individualEmailAddress: 'david@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 2,
      firmTypeDesc: 'Individual',
      roleIds: [2],
      activeRoleIds: [2],
      roleDescription: 'User',
      emailAddress: 'david.evans@example.com',
      userName: 'davidevans',
      roles: ['User'],
      serviceRequestId: '206',
      note: 'Sample note 6',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 7,
      wAccessRequestId: '107',
      qfcNumber: 'QFC007',
      firmName: 'Test Firm 7',
      individualName: 'Eve Foster',
      individualEmailAddress: 'eve@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 1,
      firmTypeDesc: 'Corporate',
      roleIds: [1],
      activeRoleIds: [1],
      roleDescription: 'Admin',
      emailAddress: 'eve.foster@example.com',
      userName: 'evefoster',
      roles: ['Admin'],
      serviceRequestId: '207',
      note: 'Sample note 7',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 8,
      wAccessRequestId: '108',
      qfcNumber: 'QFC008',
      firmName: 'Test Firm 8',
      individualName: 'Frank Green',
      individualEmailAddress: 'frank@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 2,
      firmTypeDesc: 'Individual',
      roleIds: [2],
      activeRoleIds: [2],
      roleDescription: 'User',
      emailAddress: 'frank.green@example.com',
      userName: 'frankgreen',
      roles: ['User'],
      serviceRequestId: '208',
      note: 'Sample note 8',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 9,
      wAccessRequestId: '109',
      qfcNumber: 'QFC009',
      firmName: 'Test Firm 9',
      individualName: 'Grace Harris',
      individualEmailAddress: 'grace@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 1,
      firmTypeDesc: 'Corporate',
      roleIds: [1, 2],
      activeRoleIds: [1],
      roleDescription: 'Admin, User',
      emailAddress: 'grace.harris@example.com',
      userName: 'graceharris',
      roles: ['Admin', 'User'],
      serviceRequestId: '209',
      note: 'Sample note 9',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    },
    {
      wUserId: 10,
      wAccessRequestId: '110',
      qfcNumber: 'QFC010',
      firmName: 'Test Firm 10',
      individualName: 'Henry Irving',
      individualEmailAddress: 'henry@example.com',
      isRegistered: true,
      isActive: true,
      isAccountLocked: false,
      isUserAccessAuthorised: true,
      firmTypeId: 2,
      firmTypeDesc: 'Individual',
      roleIds: [2],
      activeRoleIds: [2],
      roleDescription: 'User',
      emailAddress: 'henry.irving@example.com',
      userName: 'henryirving',
      roles: ['User'],
      serviceRequestId: '210',
      note: 'Sample note 10',
      createdDate: new Date(),
      updatedDate: new Date(),
      createdBy: 'Admin',
      updatedBy: 'Admin',
      modifiedDate: new Date()
    }
  ];

  getUserList(page: number, pageSize: number): Observable<PaginatedResponse<User>> {
    const startIndex = (page - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const items = this.mockUsers.slice(startIndex, endIndex) as User[];
    
    return of({
      items,
      totalPages: Math.ceil(this.mockUsers.length / pageSize),
      currentPage: page,
      pageSize: pageSize,
      totalItems: this.mockUsers.length
    });
  }

  getFirmTypes(): Observable<{ id: number; name: string }[]> {
    return of([
      { id: 1, name: 'Corporate' },
      { id: 2, name: 'Individual' }
    ]);
  }

  getFirmNames(): Observable<{ qfcNumber: string; name: string }[]> {
    return of([
      { qfcNumber: 'QFC001', name: 'Test Firm 1' },
      { qfcNumber: 'QFC002', name: 'Test Firm 2' },
      { qfcNumber: 'QFC003', name: 'Test Firm 3' },
      { qfcNumber: 'QFC004', name: 'Test Firm 4' },
      { qfcNumber: 'QFC005', name: 'Test Firm 5' },
      { qfcNumber: 'QFC006', name: 'Test Firm 6' },
      { qfcNumber: 'QFC007', name: 'Test Firm 7' },
      { qfcNumber: 'QFC008', name: 'Test Firm 8' },
      { qfcNumber: 'QFC009', name: 'Test Firm 9' },
      { qfcNumber: 'QFC010', name: 'Test Firm 10' }
    ]);
  }

  getUserRoles(): Observable<{ id: number; name: string }[]> {
    return of([
      { id: 1, name: 'Admin' },
      { id: 2, name: 'User' }
    ]);
  }
}
